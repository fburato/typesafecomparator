plugins {
    id 'java'
}


apply plugin: "jacoco"


jacoco {
    toolVersion = "0.8.1"
}



jacocoTestReport {
    reports {
        html.destination file("${buildDir}/jacocoHtml")
    }
}

sourceSets {
    generated {
        java.srcDir "${buildDir}/generated/src/java"
    }
}

group 'com.github.fburato'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform()
    jacoco {
        append = true
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}


dependencies {
    testCompile("org.mdkt.compiler:InMemoryJavaCompiler:1.3.0")
    testCompile("org.junit.jupiter:junit-jupiter-api:5.4.0")
    testCompile("org.assertj:assertj-core:3.11.1")
    testCompile("io.github.glytching:junit-extensions:2.3.0")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.4.0")
}

task('generateClasses', type: JavaExec) {
    dependsOn('compileJava')
    main = "com.github.fburato.typesafecomparator.codegen.Generator"
    classpath = sourceSets.main.runtimeClasspath
    args = Arrays.asList("${buildDir}/generated/src/java","50")
}


task myCompile(type: JavaCompile) {
    dependsOn('generateClasses')
    source = fileTree(dir: "${buildDir}/generated/src/java", include: '**/*.java')
    classpath = sourceSets.main.output
    setDestinationDir(sourceSets.main.output.getClassesDirs().singleFile)
}

jar {
    exclude('com/github/fburato/typesafecomparator/codegen/**')
}

jar.dependsOn(myCompile)