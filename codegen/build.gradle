plugins {
    id 'java'
    id 'maven-publish'
    id 'maven'
    id 'signing'
}

apply plugin: "jacoco"


ext.moduleName = 'com.github.fburato.typesafecomparator.api'


jacoco {
    toolVersion = "0.8.1"
}
jacocoTestReport {
    reports {
        html.destination file("${buildDir}/jacocoHtml")
    }
}

sourceSets {
    generated {
        java.srcDir "${buildDir}/generated/src/java"
    }
}

archivesBaseName = 'typesafecomparator-api'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform()
    jacoco {
        append = true
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

task generateClasses(type: JavaExec) {
    dependsOn('compileJava')
    main = "com.github.fburato.typesafecomparator.codegen.Generator"
    classpath = sourceSets.main.runtimeClasspath
    args = Arrays.asList("${buildDir}/generated/src/java","50")
}


task myCompile(type: JavaCompile) {
    dependsOn('generateClasses')
    source = fileTree(dir: "${buildDir}/generated/src/java", include: '**/*.java')
    classpath = sourceSets.main.output
    setDestinationDir(sourceSets.main.output.getClassesDirs().singleFile)
}

jar {
    exclude('com/github/fburato/typesafecomparator/codegen/**')
    inputs.property("moduleName", moduleName)
    manifest {
        attributes('Automatic-Module-Name': moduleName)
    }
}

jar.dependsOn(myCompile)

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version
            pom {
                name = 'Typesafecomparator API'
                description = 'Typesafecomparator API'
                url = 'https://github.com/fburato/typesafecomparator'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'frank'
                        name = 'Francesco Burato'
                        email = 'frankburato-github@yahoo.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:fburato/typesafecomparator.git'
                    developerConnection = 'scm:git:git@github.com:fburato/typesafecomparator.git'
                    url = 'https://github.com/fburato/typesafecomparator'
                }
            }
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'Typesafecomparator API'
                packaging 'jar'
                description 'Typesafecomparator API'
                url 'https://github.com/fburato/typesafecomparator'

                scm {
                    connection = 'scm:git:git@github.com:fburato/typesafecomparator.git'
                    developerConnection = 'scm:git:git@github.com:fburato/typesafecomparator.git'
                    url = 'https://github.com/fburato/typesafecomparator'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'frank'
                        name = 'Francesco Burato'
                        email = 'frankburato-github@yahoo.com'
                    }
                }
            }
        }
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

dependencies {
    testCompile("org.mdkt.compiler:InMemoryJavaCompiler:1.3.0")
    testCompile("org.junit.jupiter:junit-jupiter-api:5.4.0")
    testCompile("org.assertj:assertj-core:3.11.1")
    testCompile("io.github.glytching:junit-extensions:2.3.0")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.4.0")
}